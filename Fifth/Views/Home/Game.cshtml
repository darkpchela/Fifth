<div name="userName" class="text-danger float-left ml-2 mt-2">
    <h2>
    </h2>
</div>
<div name="userName" class="text-danger float-right mr-2 mt-2">
    <h2>
    </h2>
</div>
<div class="game-board position-fixed" id='gameboard'>
    <div class="p-2 h-100 w-100 border border-warning rounded bg-secondary">
        <div class="h-100 w-100 d-flex flex-row flex-wrap justify-content-around align-items-center bg-dark rounded">
            <button id="0" class="btn btn-outline-warning align-content-center"></button>
            <button id="1" class="btn btn-outline-warning"></button>
            <button id="2" class="btn btn-outline-warning"></button>
            <button id="3" class="btn btn-outline-warning"></button>
            <button id="4" class="btn btn-outline-warning"></button>
            <button id="5" class="btn btn-outline-warning"></button>
            <button id="6" class="btn btn-outline-warning"></button>
            <button id="7" class="btn btn-outline-warning"></button>
            <button id="8" class="btn btn-outline-warning"></button>
        </div>
    </div>
</div>
<button id="test">
    test
</button>

@section Scripts{
    <script @*src="~/js/game.js"*@>
        const homeUrl = "/Home/";
        const crossElem = '<svg viewBox="4 4 8 8" class="bi bi-x" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/></svg>'
        const circleElem = '<svg viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd"d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" /></svg>';
        const cells = $('#gameboard button');
        const disableField = () => cells.prop("disabled", true);
        const enableField = () => cells.prop("disabled", false);
        const disableCell = index => $(`#gameboard #${index}`).prop("disabled", true)
        const goHome = () => window.location.replace(homeUrl);
        const setCharToCell = (index, elem) => $(`#gameboard #${index}`).append(elem);
        const getElemId = elem => $(elem).attr('id');
        const userNameElems = $('div[name="userName"] h2');

        disableField();
    </script>
    <script>
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/GameHub")
            .build();

        let myChar;
        let isMyMove = false;
        $('#test').click(e => {
            e.preventDefault();
            alert("clecked")
            hubConnection.invoke("GetPlayersInfoRequest");
        })

        hubConnection.on("OnPlayerEntered", function (userName, id) {
            console.log(`$User: ${userName} ConnectionId: ${id}`);
            hubConnection.invoke("GetPlayersInfoRequest");
        });

        hubConnection.on("Disconnect", () => {
            goHome();
        });

        hubConnection.on("AcceptPlayersInfo", (players) => {
            for (var i = 0; i < players.length; i++) {
                if (!$(userNameElems[i]).attr("data-id")) {
                    $(userNameElems[i]).attr("data-id", players[i].connectionId)
                    $(userNameElems[i]).text(players[i].userName);
                }
            }
        });

        hubConnection.on("OnGameStarted", data => {
            if (isMyMove) {
                $('#gameboard button').prop("disabled", false);
                $('#me').addClass("text-success")
            }
            else {
                $('#opponent').addClass("text-success")
            }
        });

        hubConnection.on("OnMoveMaid", index => {
            disableCell(index);
            if (isMyMove) {
                disableField();
                myChar == "o" ? setCharToCell(index, circleElem) : setCharToCell(index, crossElem);
            }
            else {
                enableField();
                myChar == "o" ? setCharToCell(index, crossElem) : setCharToCell(index, circleElem);
            }
            isMyMove = !isMyMove;
        });

        hubConnection.on("AcceptChar", char => {
            myChar = char;
            if (myChar == "x")
                isMyMove = true;
        });

        hubConnection.on("OnGameOver", res => {
            alert(res);
        });

        $('#gameboard button').click(e => {
            e.preventDefault();
            let index = getElemId(e.target);
            hubConnection.invoke('AcceptMoveRequest', index);
        });

        hubConnection.start();
    </script>
}