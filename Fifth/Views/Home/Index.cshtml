@{
    ViewData["Title"] = "Main Page";
}
@inject Fifth.Interfaces.ITagCrudService tagsService
<div class="col-2 float-left">
    <div class="text-center">
        <h3 class="text-monospace text-warning">Tags</h3>
    </div>
    <div class="p-2  tags-cloud bg-secondary border border-warning rounded">
        <div id="tagsCloud" class="d-flex flex-row flex-wrap justify-content-center">
            <a id="tagPrototype" href="#" data-selected="0"  class="tag" hidden></a>
            @foreach (var item in await tagsService.GetAll())
            {
            <a href="#" data-selected="0" data-id="@item.Id" data-value="@item.Value" class="tag">#@item.Value</a>
            }
        </div>
    </div>
</div>

<div class="col-2 float-right">
    <div class="text-center">
        <h3 class="text-monospace text-warning">Filter</h3>
    </div>
    <div class="p-2  tags-cloud bg-secondary border border-warning rounded">
        <div id="tagsFilter" class="d-flex flex-row flex-wrap justify-content-center">
        </div>
    </div>
</div>

<div id="gamesTable" class="col-8 offset-2 h-100">
</div>

<div id="modal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered text-warning">
        <div id="modalContent" class="modal-content bg-secondary border border-warning rounded">
            <div class="modal-header">
                <h4 class="modal-title">New game</h4>
                <a href="#" class="btn text-white bg-dark btn-lg close" rel="modal:close"
                   aria-hidden="true">&times;</a>
            </div>
            @if (User.Identity.IsAuthenticated)
            {
                await Html.RenderPartialAsync("_CreateGame");
            }
            else
            {
                <div>
                    <div class="modal-body d-flex flex-column justify-content-center">
                        <h5>Please, authorize to create a game!</h5>
                        <a asp-action="SignIn" asp-controller="Account" class="btn text-warning bg-dark btn-lg ">Sign In</a>
                        <a asp-action="SignUp" asp-controller="Account" class="btn text-warning bg-dark btn-lg ">Sign Up</a>
                    </div>
                    <div class="modal-footer">
                        <a href="#" class="btn text-warning bg-dark btn-lg " rel="modal:close">Close</a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<button id="sendBtn">Test</button>

@section Scripts{
    <script src="~/lib/tagify/tagify.min.js"></script>
    <script src="~/lib/tagify/jQuery.tagify.min.js"></script>
    <script>
        let tagify;

        $('#tagsCloud a, #tagsFilter a').click((e) => {
            e.preventDefault();
            let selected = $(e.target).attr('data-selected');
            if (selected == 0) {
                $(e.target).appendTo($('#tagsFilter'))
                e.target.setAttribute('data-selected', 1)
            }
            else {
                $(e.target).appendTo($('#tagsCloud'));
                e.target.setAttribute('data-selected', 0);
            }
            let tags = JSON.stringify(getFilterTags());
            updateTableAjax(tags);
        });

        const getFilterTags = () => {
            let elems = $('#tagsFilter a');
            let tags = [];
            for (let i = 0; i < elems.length; i++) {
                let tag = {
                    id: $(elems[i]).data('id'),
                    value: $(elems[i]).data('value')
                };
                tags.push(tag);
            }
            return tags;
        };

    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.js"></script>
    <script @*src="~/js/index.js"*@>
        const updateTagify = () => {
            let input = document.querySelector('#tagsInput');
            if (input) {
                tagify = new Tagify(input, {
                    whitelist: [],
                    maxTags: 10,
                    dropdown: {
                        maxItems: 20,
                        classname: "tags-look",
                        enabled: 0,
                        closeOnSelect: false
                    }
                });
                getTagsAjax();
            }
        };

        const updateNewGameRef = () => {
            $('#newGame').click((e) => {
                e.preventDefault();
                $('#modal').modal('show');
            })
        };
        const updateCreateGameRef = () => {
            $('#btnCreate').click(e => {
                e.preventDefault();
                let data = $('#createForm').serialize();
                createGameAjax(data);
            })
        };
        const createGameAjax = data => {
            $.ajax({
                type: "post",
                url: "Home/CreateGame",
                data: data,
                success: data => {
                    $('#modalContent').empty();
                    $('#modalContent').append(data);
                    updateCreateGameRef();
                    updateTagify();
                }
            });
        }
        const getTagsAjax = () => {
            $.ajax({
                type: "GET",
                url: "Home/GetTags",
                success: data => {
                    tagify.settings.whitelist.splice(0, data.length, ...data);
                }
            });
        }

        const updateTableAjax = (tags) => {
            $.ajax({
                type: "POST",
                url: "Home/_GamesTable",
                data: { "tagsJson" : tags },
                success: data => {
                    $('#gamesTable').empty();
                    $('#gamesTable').append(data);
                    $('#newGame').click((e) => {
                        e.preventDefault();
                        $('#modal').modal('show');
                        updateNewGameRef();
                    });
                }
            });
        };
    </script>
    <script>
        $(updateTableAjax());
        $(updateCreateGameRef());
        $(updateNewGameRef());
        $(updateTagify());
    </script>
    <script>
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/MainHub")
            .build();

        hubConnection.on("OnGameStartedOrClosed", id => {
            updateTableAjax();
        });

        hubConnection.on("OnGameCreated", gameVm => {
            updateTableAjax();
        });

        hubConnection.start();
    </script>

}